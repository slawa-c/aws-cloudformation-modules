AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCName:
    Description: The name of the VPC
    Type: String
    Default: Lab-08-03-VPC
  VPCBlock:
    Description: CIDR subnet of the VPC
    Type: String
    Default: 10.20.0.0/16
  MyIP:
    AllowedPattern: "^[0-9./]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, dots (.), and forward slash (/)."
    Description: "Allow SSH traffic from this IP. Enter your current external IP in format x.x.x.x/xx"
    Type: "String"
  KeyPair: 
    Description: "The EC2 Key Pair to allow SSH access to the instance"
    Type: "AWS::EC2::KeyPair::KeyName"
  ImageId:
    Description: "The ImageId for EC2 Instance"
    Type: "String"
    Default: "ami-09e67e426f25ce0d7"
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.20.0.0/16
    Public0:
      CIDR: 10.20.0.0/24
    Public1:
      CIDR: 10.20.1.0/24
    Private0:
      CIDR: 10.20.2.0/24
    Private1:
      CIDR: 10.20.3.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: VPCBlock
      Tags:
        - Key: Name
          Value:
            Ref: VPCName
  PublicSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - Public0
          - CIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: Lab-08-03-public-subnet-0
        - Key: Network
          Value: Public
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - Public1
          - CIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: Lab-08-03-public-subnet-1
        - Key: Network
          Value: Public
  PrivateSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - Private0
          - CIDR
      Tags:
        - Key: Name
          Value: Lab-08-03-private-subnet-0
        - Key: Network
          Value: Private
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": { Ref: "AWS::Region" } ]
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - Private1
          - CIDR
      Tags:
        - Key: Name
          Value: Lab-08-03-private-subnet-1
        - Key: Network
          Value: Private
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Lab-08-03-internet-gateway
        - Key: Network
          Value: Public
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Lab-08-03-public-route-table
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation0:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet0
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  NATIP0:
    Type: 'AWS::EC2::EIP'
    DependsOn : InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Lab-08-03-NAT-ip0
        - Key: Network
          Value: Private
  NATIP1:
    Type: 'AWS::EC2::EIP'
    DependsOn : InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Lab-08-03-NAT-ip1
        - Key: Network
          Value: Private
  NATGateway0:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - NATIP0
          - AllocationId
      SubnetId:
        Ref: PublicSubnet0
      Tags:
        - Key: Name
          Value: Lab-08-03-NAT-gateway0
        - Key: Network
          Value: Private
  NATGateway1:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - NATIP1
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: Lab-08-03-NAT-gateway1
        - Key: Network
          Value: Private
  PrivateRouteTable0:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Lab-08-03-private-route-table0
        - Key: Network
          Value: Public
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Lab-08-03-private-route-table1
        - Key: Network
          Value: Public
  PrivateRouteToInternet0:
    DependsOn: NATGateway0
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway0
  PrivateRouteToInternet1:
    DependsOn: NATGateway1
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
  PrivateSubnetRouteTableAssociation0:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet0
      RouteTableId:
        Ref: PrivateRouteTable0
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable1
  InstanceSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      VpcId: 
        Ref: VPC
      GroupDescription: "Enable http and SSH access via port 22"
      SecurityGroupIngress: 
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: 
            Ref: "MyIP"
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
# ELB Security Group allowing Port 80 from anywhere
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'http Port 80'
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
# Linux Instance with Apache running on Port 80
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnet0
    Properties:
      InstanceType: t2.micro
      KeyName: 
        Ref: "KeyPair"
      ImageId:
        Ref: "ImageId"
      Tags:
        - Key: Name
          Value: Lab-08-03-EC2-web-instance
      InstanceInitiatedShutdownBehavior: stop
      Monitoring: 'true'
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref InstanceSecurityGroup
        SubnetId:
          Ref: PublicSubnet0
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          apt update -y
          apt upgrade -y
          apt install apache2 -y
          echo "Healthy" > /var/www/html/index.html
          systemctl enable apache2
          systemctl start apache2
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource AmazonLinuxInstance \
            --region ${AWS::Region}  
# Target Group
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id:
          Ref: EC2Instance
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: 'VPC'
      Tags:
      - Key: Name
        Value: Lab-08-03-EC2-Target-Group
      - Key: Port
        Value: 80
#ELB (ALB)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: EC2TargetGroup
      LoadBalancerArn:
          Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # or internal
      Subnets:
      - Ref: PublicSubnet0
      - Ref: PublicSubnet1
      SecurityGroups:
      - Ref: ELBSecurityGroup
      Tags:
        - Key: Name
          Value: Lab-08-03-ELB-application-lb
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: 'lab08-03-s3-backet'
# Some outputs about resources int this CF stack
Outputs:
  VPCId:
    Description: VPCId of VPC
    Value:
      Ref: VPC
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-VPC'
  PublicSubnet0:
    Description: SubnetId of public subnet 0
    Value:
      Ref: PublicSubnet0
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PublicSubnet0'
  PublicSubnet1:
    Description: SubnetId of public subnet 1
    Value:
      Ref: PublicSubnet1
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PublicSubnet1'
  PrivateSubnet0:
    Description: SubnetId of private subnet 0
    Value:
      Ref: PrivateSubnet0
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PrivateSubnet0'
  PrivateSubnet1:
    Description: SubnetId of private subnet 1
    Value:
      Ref: PrivateSubnet1
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PrivateSubnet1'
  NATIP0:
    Description: "Elastic IP0"
    Value: !Ref NATIP0
  NATIP1:
    Description: "Elastic IP1"
    Value: !Ref NATIP1
  S3BucketId:
    Description: S3BucketId of S3
    Value:
      Ref: S3Bucket
    Export:
      Name: 'lab08-03-s3-backet'
  InstanceId:
    Description: InstanceId of the EC2 instance
    Value: !Ref EC2Instance
  EC2SiteURL:
    Description: Site URL
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt [ "EC2Instance", "PublicIp" ]
  ELBSiteURL:
    Description: Site URL
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt ApplicationLoadBalancer.DNSName
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt 
      - EC2Instance
      - PublicIp
  ALBHostName:
    Description: 'Application Load Balancer Hostname'
    Value:
      !GetAtt ApplicationLoadBalancer.DNSName
  ApplicationLoadBalancer:
    Description: 'Application Load Balancer'
    Value:
      Ref: ApplicationLoadBalancer
